#!/usr/bin/env bash
# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>
# E.g.
# BUILD_DIR is /tmp/build_5b72bfcaef1adfe4bb7a9e34d80201fc
# CACHE_DIR is  app

topic() {
  sed "s/^/-----> /"
}

indent() {
  sed "s/^/       /"
}

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
LP_DIR=$(cd $(dirname $0); cd ..; pwd)
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "BIN_DIR=${BIN_DIR}, ROOT_DIR=${ROOT_DIR}, BUILD_DIR=${BUILD_DIR}, CACHE_DIR=${CACHE_DIR}, pwd=$(pwd)" | indent

# Changing this will cause any previous install to be replaced
OPENSSL_VERSION="1.1.0j"

CACHED_TAR=${CACHE_DIR}/openssl-${OPENSSL_VERSION}-heroku.tar.bz2

# This installation target is in the BUILD_DIR, which means that
# it'll end up in the slug at runtime.
BUILD_TARGET_DIR="${BUILD_DIR}/openssl"
mkdir -p ${BUILD_TARGET_DIR}

# This is the path that will be used at dyno runtime, and in which
# we build.
APP_TARGET_DIR="/app/openssl"
mkdir -p ${BUILD_TARGET_DIR}

VERSION_FILE=${BUILD_TARGET_DIR}/openssl/include/opensslv.h
if [ -f ${VERSION_FILE} ] ; then
    if fgrep -q "${OPENSSL_VERSION}" ${VERSION_FILE} ; then
        echo "OpenSSL ${OPENSSL_VERSION} already installed" | topic
        exit 0
    else
        echo "Removing existing installed OpenSSL" | topic
        rm -rf ${BUILD_TARGET_DIR}/*
    fi
fi

echo "Installing OpenSSL ${OPENSSL_VERSION}" | topic

# Use the cached tar file if we find it
if [ ! -f ${CACHED_TAR} ] ; then
    echo "Cached files not found - downloading and unpacking..." | indent
    curl -s https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xzf - -C ${BUILD_DIR}

    cd ${BUILD_DIR}/openssl-${OPENSSL_VERSION}

    # We must build at /app/... rather than in the BUILD_DIR because
    # the installation hardwires some paths and symlinks. In order for
    # these to be in the right location at dyno runtime, we have to
    # build using the same path that applies at dyno runtime.
    ./config --prefix=${APP_TARGET_DIR} -fPIC 2>&1 | indent
    echo "Building at ${APP_TARGET_DIR}..." | indent
    make -j -s
    make -j -s install_sw
    cd ${BUILD_DIR}
    rm -rf ${BUILD_DIR}/openssl-${OPENSSL_VERSION}

    # Save the build artefacts
    echo "Caching..." | indent
    (cd ${APP_TARGET_DIR} ; tar cjf ${CACHED_TAR} .)

    echo "Creating .profile.d entry" | topic
    mkdir -p ${BUILD_DIR}/.profile.d

    # These exports must point to /app, because the profile is
    # executed in a running dyno, not the buildpack environment
    cat <<EOF > ${BUILD_DIR}/.profile.d/openssl.sh
export PATH="${APP_TARGET_DIR}/bin:$PATH"
export PKG_CONFIG_PATH="${BUILD_TARGET_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export INCLUDE_PATH="${BUILD_TARGET_DIR}/include:${BUILD_TARGET_DIR}/include/openssl:${INCLUDE_PATH}"
export LIBRARY_PATH="${BUILD_TARGET_DIR}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="${BUILD_TARGET_DIR}/lib:${LD_LIBRARY_PATH}"
EOF
    chmod +x ${BUILD_DIR}/.profile.d/openssl.sh
fi

echo "Unpacking cached files..." | indent
tar xjf ${CACHED_TAR} -C ${BUILD_TARGET_DIR}

echo "Install of OpenSSL ${OPENSSL_VERSION} complete" | indent


# These exports point to the build directory, not to /app, so that
# they work for later buildpacks.
export PATH="${BUILD_TARGET_DIR}/bin:$PATH"
export PKG_CONFIG_PATH="${BUILD_TARGET_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export INCLUDE_PATH="${BUILD_TARGET_DIR}/include:${BUILD_TARGET_DIR}/include/openssl:${INCLUDE_PATH}"
export LIBRARY_PATH="${BUILD_TARGET_DIR}/lib:${LIBRARY_PATH}"
export LD_LIBRARY_PATH="${BUILD_TARGET_DIR}/lib:${LD_LIBRARY_PATH}"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|PKG_CONFIG_PATH)='  > ${LP_DIR}/export
